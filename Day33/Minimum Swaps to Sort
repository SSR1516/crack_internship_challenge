//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends


class Solution 
{
    public:
    // Function to find the minimum number of swaps required to sort the array.
    int minSwaps(vector<int>& nums)
    {
        int n = nums.size();
        // Create a pair of element and its index
        vector<pair<int, int>> arr(n);
        for (int i = 0; i < n; i++) {
            arr[i] = {nums[i], i};
        }
        
        // Sort the array based on the array values
        sort(arr.begin(), arr.end());
        
        // To keep track of visited elements
        vector<bool> visited(n, false);
        int swaps = 0;
        
        // Traverse through the elements
        for (int i = 0; i < n; i++) {
            // If the element is already visited or it is already in the correct position
            if (visited[i] || arr[i].second == i)
                continue;
            
            // Find the number of nodes in this cycle
            int cycle_size = 0;
            int j = i;
            while (!visited[j]) {
                visited[j] = true;
                j = arr[j].second;
                cycle_size++;
            }
            
            // If there is a cycle of size `k`, it requires `k-1` swaps
            if (cycle_size > 1) {
                swaps += (cycle_size - 1);
            }
        }
        
        return swaps;
    }
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n;
		cin >> n;
		vector<int>nums(n);
		for(int i = 0; i < n; i++)
			cin >> nums[i];
		Solution obj;
		int ans = obj.minSwaps(nums);
		cout << ans <<"\n";
	}
	return 0;
}
// } Driver Code Ends
