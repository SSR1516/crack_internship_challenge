/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int pathSum(TreeNode* root, int targetSum) {
        if(root==NULL){
            return 0;
        }
        int ans=0;

        vector<long long> t=solve(root,targetSum,ans);
        return ans;
        
    }
    vector<long long> solve(TreeNode* root,int target,int& ans){
        if(root->left==NULL && root->right==NULL){
            if(root->val==target){
                ans++;
            }
            return {root->val};
        }

        vector<long long> left;
        vector<long long> right;
        if(root->left){
            left=solve(root->left,target,ans);
        }
        if(root->right){
            right=solve(root->right,target,ans);
        }
        if(root->val==target){
            ans++;
        }
        for(int i=0;i<left.size();i++){
            left[i]+=root->val;
            if(left[i]==target){
                ans++;
            }
        }
        for(int i=0;i<right.size();i++){
            right[i]+=root->val;
            if(right[i]==target){
                ans++;
            }
            left.push_back(right[i]);
        }
        left.push_back(root->val);

        return left;

    }
};
